a. The developers of TrustedApp should have used the built in string comparison function instead of writing their own, which would have prevented the attack in task 2. Furthermore, they should not have stored the password in the clear. They should have chosen a password, hashed tha password, and then stored the hash in the app. Then when it receives a paramString, it would hash that string and then compare the hashes. Thus, even if the attacker knows what the hash is, they would be not be able to figure out the secret key is. Obviously, the developers should use other password defense mechanics such as using a salt, using a slow hash, using a long enough password, etc.
b. One defense would probably to obfuscate the code. This will not stop all attackers, but it will make figuring out exactly what the code does significantly harder. Another possible defense would be to move some of the code behind a web service so the code is not physically present on or accessible from the device.
